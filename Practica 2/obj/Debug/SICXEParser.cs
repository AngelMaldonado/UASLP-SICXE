//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\Dev\Repos\UASLP\Fundamentos de Sistemas\Practica 2\antlr\SICXE.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace antlr {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class SICXEParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, OPF1=8, OPF2=9, 
		OPF3=10, TIPODIRECTIVA=11, OPDIRECTIVA=12, REG=13, NUM=14, ID=15, FINL=16, 
		WS=17;
	public const int
		RULE_programa = 0, RULE_inicio = 1, RULE_fin = 2, RULE_proposicion = 3, 
		RULE_instruccion = 4, RULE_f1 = 5, RULE_f2 = 6, RULE_f3 = 7, RULE_f4 = 8, 
		RULE_simple = 9, RULE_indirecto = 10, RULE_inmediato = 11, RULE_directiva = 12;
	public static readonly string[] ruleNames = {
		"programa", "inicio", "fin", "proposicion", "instruccion", "f1", "f2", 
		"f3", "f4", "simple", "indirecto", "inmediato", "directiva"
	};

	private static readonly string[] _LiteralNames = {
		null, "'START'", "'END'", "','", "'+'", "'X'", "'@'", "'#'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, "OPF1", "OPF2", "OPF3", 
		"TIPODIRECTIVA", "OPDIRECTIVA", "REG", "NUM", "ID", "FINL", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SICXE.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public SICXEParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramaContext : ParserRuleContext {
		public InicioContext inicio() {
			return GetRuleContext<InicioContext>(0);
		}
		public FinContext fin() {
			return GetRuleContext<FinContext>(0);
		}
		public ProposicionContext[] proposicion() {
			return GetRuleContexts<ProposicionContext>();
		}
		public ProposicionContext proposicion(int i) {
			return GetRuleContext<ProposicionContext>(i);
		}
		public ProgramaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programa; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICXEListener typedListener = listener as ISICXEListener;
			if (typedListener != null) typedListener.EnterPrograma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICXEListener typedListener = listener as ISICXEListener;
			if (typedListener != null) typedListener.ExitPrograma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICXEVisitor<TResult> typedVisitor = visitor as ISICXEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrograma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramaContext programa() {
		ProgramaContext _localctx = new ProgramaContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_programa);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 26; inicio();
			State = 28;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 27; proposicion();
				}
				}
				State = 30;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << OPF1) | (1L << OPF2) | (1L << OPF3) | (1L << ID))) != 0) );
			State = 32; fin();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InicioContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(SICXEParser.ID, 0); }
		public ITerminalNode NUM() { return GetToken(SICXEParser.NUM, 0); }
		public ITerminalNode FINL() { return GetToken(SICXEParser.FINL, 0); }
		public InicioContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inicio; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICXEListener typedListener = listener as ISICXEListener;
			if (typedListener != null) typedListener.EnterInicio(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICXEListener typedListener = listener as ISICXEListener;
			if (typedListener != null) typedListener.ExitInicio(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICXEVisitor<TResult> typedVisitor = visitor as ISICXEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInicio(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InicioContext inicio() {
		InicioContext _localctx = new InicioContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_inicio);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 34; Match(ID);
			State = 35; Match(T__0);
			State = 36; Match(NUM);
			State = 37; Match(FINL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinContext : ParserRuleContext {
		public ITerminalNode FINL() { return GetToken(SICXEParser.FINL, 0); }
		public ITerminalNode ID() { return GetToken(SICXEParser.ID, 0); }
		public FinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fin; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICXEListener typedListener = listener as ISICXEListener;
			if (typedListener != null) typedListener.EnterFin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICXEListener typedListener = listener as ISICXEListener;
			if (typedListener != null) typedListener.ExitFin(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICXEVisitor<TResult> typedVisitor = visitor as ISICXEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FinContext fin() {
		FinContext _localctx = new FinContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_fin);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39; Match(T__1);
			State = 41;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ID) {
				{
				State = 40; Match(ID);
				}
			}

			State = 43; Match(FINL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProposicionContext : ParserRuleContext {
		public ITerminalNode FINL() { return GetToken(SICXEParser.FINL, 0); }
		public InstruccionContext instruccion() {
			return GetRuleContext<InstruccionContext>(0);
		}
		public DirectivaContext directiva() {
			return GetRuleContext<DirectivaContext>(0);
		}
		public ITerminalNode ID() { return GetToken(SICXEParser.ID, 0); }
		public ProposicionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proposicion; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICXEListener typedListener = listener as ISICXEListener;
			if (typedListener != null) typedListener.EnterProposicion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICXEListener typedListener = listener as ISICXEListener;
			if (typedListener != null) typedListener.ExitProposicion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICXEVisitor<TResult> typedVisitor = visitor as ISICXEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProposicion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProposicionContext proposicion() {
		ProposicionContext _localctx = new ProposicionContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_proposicion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				{
				State = 45; Match(ID);
				}
				break;
			}
			State = 50;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__3:
			case OPF1:
			case OPF2:
			case OPF3:
				{
				State = 48; instruccion();
				}
				break;
			case ID:
				{
				State = 49; directiva();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 52; Match(FINL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstruccionContext : ParserRuleContext {
		public F1Context f1() {
			return GetRuleContext<F1Context>(0);
		}
		public F2Context f2() {
			return GetRuleContext<F2Context>(0);
		}
		public F3Context f3() {
			return GetRuleContext<F3Context>(0);
		}
		public F4Context f4() {
			return GetRuleContext<F4Context>(0);
		}
		public InstruccionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruccion; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICXEListener typedListener = listener as ISICXEListener;
			if (typedListener != null) typedListener.EnterInstruccion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICXEListener typedListener = listener as ISICXEListener;
			if (typedListener != null) typedListener.ExitInstruccion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICXEVisitor<TResult> typedVisitor = visitor as ISICXEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruccion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstruccionContext instruccion() {
		InstruccionContext _localctx = new InstruccionContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_instruccion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case OPF1:
				{
				State = 54; f1();
				}
				break;
			case OPF2:
				{
				State = 55; f2();
				}
				break;
			case OPF3:
				{
				State = 56; f3();
				}
				break;
			case T__3:
				{
				State = 57; f4();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class F1Context : ParserRuleContext {
		public ITerminalNode OPF1() { return GetToken(SICXEParser.OPF1, 0); }
		public F1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_f1; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICXEListener typedListener = listener as ISICXEListener;
			if (typedListener != null) typedListener.EnterF1(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICXEListener typedListener = listener as ISICXEListener;
			if (typedListener != null) typedListener.ExitF1(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICXEVisitor<TResult> typedVisitor = visitor as ISICXEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitF1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public F1Context f1() {
		F1Context _localctx = new F1Context(_ctx, State);
		EnterRule(_localctx, 10, RULE_f1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60; Match(OPF1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class F2Context : ParserRuleContext {
		public ITerminalNode OPF2() { return GetToken(SICXEParser.OPF2, 0); }
		public ITerminalNode NUM() { return GetToken(SICXEParser.NUM, 0); }
		public ITerminalNode[] REG() { return GetTokens(SICXEParser.REG); }
		public ITerminalNode REG(int i) {
			return GetToken(SICXEParser.REG, i);
		}
		public F2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_f2; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICXEListener typedListener = listener as ISICXEListener;
			if (typedListener != null) typedListener.EnterF2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICXEListener typedListener = listener as ISICXEListener;
			if (typedListener != null) typedListener.ExitF2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICXEVisitor<TResult> typedVisitor = visitor as ISICXEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitF2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public F2Context f2() {
		F2Context _localctx = new F2Context(_ctx, State);
		EnterRule(_localctx, 12, RULE_f2);
		int _la;
		try {
			State = 68;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 62; Match(OPF2);
				State = 63;
				_la = _input.La(1);
				if ( !(_la==REG || _la==NUM) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 64; Match(OPF2);
				State = 65; Match(REG);
				State = 66; Match(T__2);
				State = 67;
				_la = _input.La(1);
				if ( !(_la==REG || _la==NUM) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class F3Context : ParserRuleContext {
		public SimpleContext simple() {
			return GetRuleContext<SimpleContext>(0);
		}
		public IndirectoContext indirecto() {
			return GetRuleContext<IndirectoContext>(0);
		}
		public InmediatoContext inmediato() {
			return GetRuleContext<InmediatoContext>(0);
		}
		public ITerminalNode OPF3() { return GetToken(SICXEParser.OPF3, 0); }
		public F3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_f3; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICXEListener typedListener = listener as ISICXEListener;
			if (typedListener != null) typedListener.EnterF3(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICXEListener typedListener = listener as ISICXEListener;
			if (typedListener != null) typedListener.ExitF3(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICXEVisitor<TResult> typedVisitor = visitor as ISICXEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitF3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public F3Context f3() {
		F3Context _localctx = new F3Context(_ctx, State);
		EnterRule(_localctx, 14, RULE_f3);
		try {
			State = 74;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 70; simple();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 71; indirecto();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 72; inmediato();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 73; Match(OPF3);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class F4Context : ParserRuleContext {
		public F3Context f3() {
			return GetRuleContext<F3Context>(0);
		}
		public F4Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_f4; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICXEListener typedListener = listener as ISICXEListener;
			if (typedListener != null) typedListener.EnterF4(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICXEListener typedListener = listener as ISICXEListener;
			if (typedListener != null) typedListener.ExitF4(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICXEVisitor<TResult> typedVisitor = visitor as ISICXEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitF4(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public F4Context f4() {
		F4Context _localctx = new F4Context(_ctx, State);
		EnterRule(_localctx, 16, RULE_f4);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76; Match(T__3);
			State = 77; f3();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleContext : ParserRuleContext {
		public ITerminalNode OPF3() { return GetToken(SICXEParser.OPF3, 0); }
		public ITerminalNode ID() { return GetToken(SICXEParser.ID, 0); }
		public ITerminalNode NUM() { return GetToken(SICXEParser.NUM, 0); }
		public SimpleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICXEListener typedListener = listener as ISICXEListener;
			if (typedListener != null) typedListener.EnterSimple(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICXEListener typedListener = listener as ISICXEListener;
			if (typedListener != null) typedListener.ExitSimple(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICXEVisitor<TResult> typedVisitor = visitor as ISICXEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleContext simple() {
		SimpleContext _localctx = new SimpleContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_simple);
		int _la;
		try {
			State = 85;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 79; Match(OPF3);
				State = 80;
				_la = _input.La(1);
				if ( !(_la==NUM || _la==ID) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 81; Match(OPF3);
				State = 82;
				_la = _input.La(1);
				if ( !(_la==NUM || _la==ID) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 83; Match(T__2);
				State = 84; Match(T__4);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndirectoContext : ParserRuleContext {
		public ITerminalNode OPF3() { return GetToken(SICXEParser.OPF3, 0); }
		public ITerminalNode NUM() { return GetToken(SICXEParser.NUM, 0); }
		public ITerminalNode ID() { return GetToken(SICXEParser.ID, 0); }
		public IndirectoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indirecto; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICXEListener typedListener = listener as ISICXEListener;
			if (typedListener != null) typedListener.EnterIndirecto(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICXEListener typedListener = listener as ISICXEListener;
			if (typedListener != null) typedListener.ExitIndirecto(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICXEVisitor<TResult> typedVisitor = visitor as ISICXEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndirecto(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndirectoContext indirecto() {
		IndirectoContext _localctx = new IndirectoContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_indirecto);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87; Match(OPF3);
			State = 88; Match(T__5);
			State = 89;
			_la = _input.La(1);
			if ( !(_la==NUM || _la==ID) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InmediatoContext : ParserRuleContext {
		public ITerminalNode OPF3() { return GetToken(SICXEParser.OPF3, 0); }
		public ITerminalNode NUM() { return GetToken(SICXEParser.NUM, 0); }
		public ITerminalNode ID() { return GetToken(SICXEParser.ID, 0); }
		public InmediatoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inmediato; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICXEListener typedListener = listener as ISICXEListener;
			if (typedListener != null) typedListener.EnterInmediato(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICXEListener typedListener = listener as ISICXEListener;
			if (typedListener != null) typedListener.ExitInmediato(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICXEVisitor<TResult> typedVisitor = visitor as ISICXEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInmediato(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InmediatoContext inmediato() {
		InmediatoContext _localctx = new InmediatoContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_inmediato);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91; Match(OPF3);
			State = 92; Match(T__6);
			State = 93;
			_la = _input.La(1);
			if ( !(_la==NUM || _la==ID) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectivaContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(SICXEParser.ID, 0); }
		public ITerminalNode TIPODIRECTIVA() { return GetToken(SICXEParser.TIPODIRECTIVA, 0); }
		public ITerminalNode NUM() { return GetToken(SICXEParser.NUM, 0); }
		public ITerminalNode OPDIRECTIVA() { return GetToken(SICXEParser.OPDIRECTIVA, 0); }
		public DirectivaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directiva; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICXEListener typedListener = listener as ISICXEListener;
			if (typedListener != null) typedListener.EnterDirectiva(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICXEListener typedListener = listener as ISICXEListener;
			if (typedListener != null) typedListener.ExitDirectiva(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICXEVisitor<TResult> typedVisitor = visitor as ISICXEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirectiva(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectivaContext directiva() {
		DirectivaContext _localctx = new DirectivaContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_directiva);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95; Match(ID);
			State = 96; Match(TIPODIRECTIVA);
			State = 97;
			_la = _input.La(1);
			if ( !(_la==OPDIRECTIVA || _la==NUM) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x13\x66\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x3\x2\x3\x2\x6\x2"+
		"\x1F\n\x2\r\x2\xE\x2 \x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4"+
		"\x3\x4\x5\x4,\n\x4\x3\x4\x3\x4\x3\x5\x5\x5\x31\n\x5\x3\x5\x3\x5\x5\x5"+
		"\x35\n\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6=\n\x6\x3\a\x3\a\x3"+
		"\b\x3\b\x3\b\x3\b\x3\b\x3\b\x5\bG\n\b\x3\t\x3\t\x3\t\x3\t\x5\tM\n\t\x3"+
		"\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x5\vX\n\v\x3\f\x3\f\x3\f\x3"+
		"\f\x3\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x2\x2\x2\xF\x2\x2"+
		"\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A"+
		"\x2\x2\x5\x3\x2\xF\x10\x3\x2\x10\x11\x4\x2\xE\xE\x10\x10\x64\x2\x1C\x3"+
		"\x2\x2\x2\x4$\x3\x2\x2\x2\x6)\x3\x2\x2\x2\b\x30\x3\x2\x2\x2\n<\x3\x2\x2"+
		"\x2\f>\x3\x2\x2\x2\xE\x46\x3\x2\x2\x2\x10L\x3\x2\x2\x2\x12N\x3\x2\x2\x2"+
		"\x14W\x3\x2\x2\x2\x16Y\x3\x2\x2\x2\x18]\x3\x2\x2\x2\x1A\x61\x3\x2\x2\x2"+
		"\x1C\x1E\x5\x4\x3\x2\x1D\x1F\x5\b\x5\x2\x1E\x1D\x3\x2\x2\x2\x1F \x3\x2"+
		"\x2\x2 \x1E\x3\x2\x2\x2 !\x3\x2\x2\x2!\"\x3\x2\x2\x2\"#\x5\x6\x4\x2#\x3"+
		"\x3\x2\x2\x2$%\a\x11\x2\x2%&\a\x3\x2\x2&\'\a\x10\x2\x2\'(\a\x12\x2\x2"+
		"(\x5\x3\x2\x2\x2)+\a\x4\x2\x2*,\a\x11\x2\x2+*\x3\x2\x2\x2+,\x3\x2\x2\x2"+
		",-\x3\x2\x2\x2-.\a\x12\x2\x2.\a\x3\x2\x2\x2/\x31\a\x11\x2\x2\x30/\x3\x2"+
		"\x2\x2\x30\x31\x3\x2\x2\x2\x31\x34\x3\x2\x2\x2\x32\x35\x5\n\x6\x2\x33"+
		"\x35\x5\x1A\xE\x2\x34\x32\x3\x2\x2\x2\x34\x33\x3\x2\x2\x2\x35\x36\x3\x2"+
		"\x2\x2\x36\x37\a\x12\x2\x2\x37\t\x3\x2\x2\x2\x38=\x5\f\a\x2\x39=\x5\xE"+
		"\b\x2:=\x5\x10\t\x2;=\x5\x12\n\x2<\x38\x3\x2\x2\x2<\x39\x3\x2\x2\x2<:"+
		"\x3\x2\x2\x2<;\x3\x2\x2\x2=\v\x3\x2\x2\x2>?\a\n\x2\x2?\r\x3\x2\x2\x2@"+
		"\x41\a\v\x2\x2\x41G\t\x2\x2\x2\x42\x43\a\v\x2\x2\x43\x44\a\xF\x2\x2\x44"+
		"\x45\a\x5\x2\x2\x45G\t\x2\x2\x2\x46@\x3\x2\x2\x2\x46\x42\x3\x2\x2\x2G"+
		"\xF\x3\x2\x2\x2HM\x5\x14\v\x2IM\x5\x16\f\x2JM\x5\x18\r\x2KM\a\f\x2\x2"+
		"LH\x3\x2\x2\x2LI\x3\x2\x2\x2LJ\x3\x2\x2\x2LK\x3\x2\x2\x2M\x11\x3\x2\x2"+
		"\x2NO\a\x6\x2\x2OP\x5\x10\t\x2P\x13\x3\x2\x2\x2QR\a\f\x2\x2RX\t\x3\x2"+
		"\x2ST\a\f\x2\x2TU\t\x3\x2\x2UV\a\x5\x2\x2VX\a\a\x2\x2WQ\x3\x2\x2\x2WS"+
		"\x3\x2\x2\x2X\x15\x3\x2\x2\x2YZ\a\f\x2\x2Z[\a\b\x2\x2[\\\t\x3\x2\x2\\"+
		"\x17\x3\x2\x2\x2]^\a\f\x2\x2^_\a\t\x2\x2_`\t\x3\x2\x2`\x19\x3\x2\x2\x2"+
		"\x61\x62\a\x11\x2\x2\x62\x63\a\r\x2\x2\x63\x64\t\x4\x2\x2\x64\x1B\x3\x2"+
		"\x2\x2\n +\x30\x34<\x46LW";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace antlr
